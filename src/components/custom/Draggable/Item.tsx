// Dependencies
import React, { createContext, ReactNode } from "react"
// Internal
import { isBetween } from "./utils"
import styles from "./draggable.module.scss"
import { ReorderContext } from "./Container"

interface ItemProps {
   children: ReactNode
   uniqueId: number
   draggable?: boolean
}

// Misconception uniqueId might have empty steps, index represents the actual position
/** Reorder Item */
function Item({ draggable, children }: ItemProps) {
   const context = React.useContext(ReorderContext)
   if (!context) throw new Error("Item must be used within a Reorder.Container")
   const [{ uniqueId, index, onDragStart, isActive }, { active, hovering, activeDy }] = [context.item, context.state]
   const [activeRect, itemRect] = [context.itemRefs.current[active.index]?.rect, context.itemRefs.current[index]?.rect]

   // Make room for empty slot (draggable new position)
   const direction = index > active.index ? -1 : 1
   const shouldMove = isBetween(index, active.index, hovering.index)
   const moveDy = shouldMove ? direction * activeRect?.height : 0

   /** Generated by elements above */
   const offsetTop = context.itemRefs.current.slice(0, index).reduce((totalHeight, ref) => totalHeight + ref?.rect.height, 0)

   return (
      <>
         {/* 1 Item */}
         <div
            style={{
               position: "absolute",
               top: 0,
               transform: `translateY(${active.uniqueId === uniqueId ? activeDy + offsetTop : offsetTop + moveDy}px)`,
            }}
            className={`z-6 ${isActive && styles.active} ${styles.floating}`}
            onMouseDown={(e) => draggable && onDragStart(e, uniqueId)}
            ref={(node) => node && (context.itemRefs.current[index] = { ...context.itemRefs.current[index], node })}
         >
            <DragContext.Provider value={{ onDragStart: (e) => onDragStart(e, uniqueId), isActive }}>{children}</DragContext.Provider>
         </div>
         {/* 2 display block representation of item */}
         <div
            style={{
               display: "block",
               width: itemRect?.width,
               height: itemRect?.height,
               opacity: uniqueId / 10,
            }}
            className={`bg-red`}
         />
      </>
   )
}

interface DragContextProps {
   onDragStart: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void
   /** Item being dragged */
   isActive: boolean
}

/** Individual item drag context */
const DragContext = createContext<DragContextProps | undefined>(undefined)

/** Custom Drag handle */
const useDragHandle = () => {
   const context = React.useContext(DragContext)
   if (!context) throw new Error("useCustomDrag must be used within a Reorder.Item")
   return context
}

export type { ItemProps }
export { Item, useDragHandle }
